openapi: 3.0.3
info:
  title: Role Management API
  description: |
    A comprehensive API for role-based access control system with support for:
    - User authentication and authorization
    - Role-based permissions (admin, pm, team, client)
    - User management
    - Project management
    - Task management
    - File uploads and management
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://api.example.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with specified role
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              name: "John Doe"
              email: "john@example.com"
              password: "password123"
              password_confirmation: "password123"
              role: "team"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "admin@test.com"
              password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate the current access token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /admin/users:
    get:
      tags:
        - Admin - User Management
      summary: Get all users
      description: Retrieve list of all users (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Admin - User Management
      summary: Create new user
      description: Create a new user account (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              name: "New Team Member"
              email: "newteam@example.com"
              password: "password123"
              role: "team"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /admin/users/{id}:
    put:
      tags:
        - Admin - User Management
      summary: Update user
      description: Update user information (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: User not found

    delete:
      tags:
        - Admin - User Management
      summary: Delete user
      description: Delete user account (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: User not found

  /projects:
    get:
      tags:
        - Projects
      summary: Get all projects
      description: Retrieve list of projects based on user role
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Unauthenticated

    post:
      tags:
        - Projects
      summary: Create new project
      description: Create a new project (Admin/PM only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          description: Forbidden - Insufficient permissions

  /projects/{id}:
    get:
      tags:
        - Projects
      summary: Get project by ID
      description: Retrieve project details based on user permissions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Project ID
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          description: Forbidden - Insufficient permissions
        '404':
          description: Project not found

    put:
      tags:
        - Projects
      summary: Update project
      description: Update project information (Admin/PM only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          description: Forbidden - Insufficient permissions

    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete project (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Project ID
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Forbidden - Insufficient permissions

  /projects/{id}/tasks:
    get:
      tags:
        - Tasks
      summary: Get project tasks
      description: Retrieve tasks for a specific project
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Project ID
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags:
        - Tasks
      summary: Create new task
      description: Create a new task for a project (Admin/PM only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '403':
          description: Forbidden - Insufficient permissions

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve task details based on user permissions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Task ID
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '403':
          description: Forbidden - Insufficient permissions

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update task information based on user permissions
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '403':
          description: Forbidden - Insufficient permissions

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete task (Admin/PM only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Task ID
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Forbidden - Insufficient permissions

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [admin, pm, team, client]
          example: "team"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"

    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "E-commerce Website"
        client_id:
          type: integer
          example: 4
        status:
          type: string
          enum: [active, completed, archived]
          example: "active"
        start_date:
          type: string
          format: date
          example: "2024-01-01"
        end_date:
          type: string
          format: date
          example: "2024-06-01"
        description:
          type: string
          example: "A comprehensive e-commerce platform"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        project_id:
          type: integer
          example: 1
        assigned_to:
          type: integer
          nullable: true
          example: 3
        title:
          type: string
          example: "Project Planning"
        description:
          type: string
          nullable: true
          example: "Define project requirements"
        status:
          type: string
          enum: [todo, in_progress, review, done]
          example: "todo"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        due_date:
          type: string
          format: date
          nullable: true
          example: "2024-12-31"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
        - role
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          example: "password123"
        password_confirmation:
          type: string
          example: "password123"
        role:
          type: string
          enum: [admin, pm, team, client]
          example: "team"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@test.com"
        password:
          type: string
          example: "password123"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "New Team Member"
        email:
          type: string
          format: email
          example: "newteam@example.com"
        password:
          type: string
          minLength: 6
          example: "password123"
        role:
          type: string
          enum: [admin, pm, team, client]
          example: "team"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Updated Name"
        email:
          type: string
          format: email
          example: "updated@example.com"
        password:
          type: string
          minLength: 6
          example: "newpassword123"
        role:
          type: string
          enum: [admin, pm, team, client]
          example: "pm"

    CreateProjectRequest:
      type: object
      required:
        - name
        - client_id
        - status
      properties:
        name:
          type: string
          example: "New Project"
        client_id:
          type: integer
          example: 4
        status:
          type: string
          enum: [active, completed, archived]
          example: "active"
        start_date:
          type: string
          format: date
          example: "2024-01-01"
        end_date:
          type: string
          format: date
          example: "2024-06-01"
        description:
          type: string
          example: "Project description"

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Project Name"
        status:
          type: string
          enum: [active, completed, archived]
          example: "completed"
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        description:
          type: string

    CreateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "New Task"
        description:
          type: string
          example: "Task description"
        assigned_to:
          type: integer
          nullable: true
          example: 3
        status:
          type: string
          enum: [todo, in_progress, review, done]
          example: "todo"
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        due_date:
          type: string
          format: date
          example: "2024-12-31"

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          example: "Updated Task"
        description:
          type: string
        assigned_to:
          type: integer
          nullable: true
        status:
          type: string
          enum: [todo, in_progress, review, done]
        priority:
          type: string
          enum: [low, medium, high]
        due_date:
          type: string
          format: date

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error message"

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["The email field is required."]
            password: ["The password field is required."]

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Admin - User Management
    description: User management operations (Admin only)
  - name: Projects
    description: Project management operations
  - name: Tasks
    description: Task management operations
